# Разработай систему управления учетными записями пользователей для небольшой компании. Компания разделяет
# сотрудников на обычных работников и администраторов. У каждого сотрудника есть уникальный идентификатор (ID),
# имя и уровень доступа. Администраторы, помимо обычных данных пользователей, имеют дополнительный уровень доступа
# и могут добавлять или удалять пользователя из системы.
# Требования:
# 1.Класс `User*: Этот класс должен инкапсулировать данные о пользователе: ID, имя и уровень доступа
# ('user' для обычных сотрудников).
# 2.Класс `Admin`: Этот класс должен наследоваться от класса `User`. Добавь дополнительный атрибут уровня доступа,
# специфичный для администраторов ('admin'). Класс должен также содержать методы `add_user` и `remove_user`,
# которые позволяют добавлять и удалять пользователей из списка (представь, что это просто список экземпляров `User`).
# 3.Инкапсуляция данных: Убедись, что атрибуты классов защищены от прямого доступа и модификации снаружи.
# Предоставь доступ к необходимым атрибутам через методы (например, get и set методы).


# Класс User - базовый
class User():
    # Конструктор класса
    def __init__(self, name):
        self.__name = name                # ФИО сотрудника
        self.__access_level = "user"      # Уровень доступа сотрудника

    # Получение информации о сотруднике
    def get_info(self):
        return self.__name, self.__access_level


# Класс Admin - дочерний
class Admin(User):
    # Конструктор класса
    def __init__(self, name, level):
        super().__init__(name)              # Наследуем только ФИО
        self.__id = 1                       # ID админа
        self.__admin_level = level          # Уровень доступа
        self.list_employee = {}             # Словарь где будем хранить список сотрудников
        self.last_id = 1                    # Ключ Он же будет являться ID сотрудника

    # Добавление нового сотрудника
    def add_user(self, user):
        if isinstance(user, User):          # Проверяем принадлежность объекта классу User
            self.last_id += 1               # Формируем ID
            self.list_employee[self.last_id] = user
            print(f"ID сотрудника {name} - {self.last_id}")
        else:
            print("Формат данных о сотруднике неправильный")

    # Удаление сотрудника
    def remove_user(self, id):
        if id in self.list_employee:        # Проверяем наличие сотрудника в списке
            user = self.list_employee.pop(id)
            print(f"Сотрудник {user._User__name} удален")
        else:
            print(f"Сотрудника с ID {id} нет")

    # Получение информации о сотруднике
    def get_user_info(self, id):            # Проверяем наличие сотрудника в списке
        if id in self.list_employee:
            user = self.list_employee[id].get_info()    # Получаем приватные данные о сотруднике
            print(f"Сотрудник {user[0]} имеет ID {id} и уровень доступа {user[1]}")
        else:
            print(f"Сотрудника с ID {id} нет")

    # Вывод списка сотрудников
    def get_all_user(self):
        print("{0:^4} {1:^30} {2:^6}".format("ID", "ФИО", "Доступ"))
        print("="*42)
        for id in self.list_employee:
            user = self.list_employee[id].get_info()    # Получаем приватные данные о сотруднике
            print("{0:^4} {1:<30} {2:<6}".format(id, user[0], user[1]))

admin = Admin("Чухланцев Александр", "admin")   # Создаем объект класса Admin

# Запускаем цикл общения с пользователем
while True:
    print("1 - Добавить сотрудника")
    print("2 - Удалить сотрудника")
    print("3 - Получить данные по сотруднику")
    print("4 - Вывести список всех сотрудников")
    print("5 - Завершить программу")

    num = input("Выберите действие: ")

    match num:
        case "1":
            name = input("Введите Фамилию и Имя сотрудника: ")
            user = User(name)                                   # Создаем объект класса User
            admin.add_user(user)                                # Добавляем нового сотрудника
        case "2":
            id = int(input("Введите ID сотрудника: "))
            admin.remove_user(id)                               # Удаляем сотрудника
        case "3":
            id = int(input("Введите ID сотрудника: "))
            admin.get_user_info(id)                             # Запрашиваем информацию по сотруднику
        case "4":
            admin.get_all_user()                                # Запрашиваем список сотрудников
        case "5":
            break
        case _:
            print("Такого действия нет. Повторите выбор.")